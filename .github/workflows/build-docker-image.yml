name: Build and Push Docker Image

on:
  push:
    branches:
      - dev
      - 'release/*'
      - 'hotfix/*'
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - dev
      - 'release/*'
      - 'hotfix/*'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Determine version and branch type
        id: version_info
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version from package.json: $VERSION"
          
          # Determine branch type and extract version from branch name if applicable
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          BRANCH_TYPE="unknown"
          BRANCH_VERSION=""
          
          if [[ "$BRANCH_NAME" == "dev" ]]; then
            BRANCH_TYPE="dev"
          elif [[ "$BRANCH_NAME" == release/* ]]; then
            BRANCH_TYPE="release"
            BRANCH_VERSION=${BRANCH_NAME#release/}
          elif [[ "$BRANCH_NAME" == hotfix/* ]]; then
            BRANCH_TYPE="hotfix"
            BRANCH_VERSION=${BRANCH_NAME#hotfix/}
          fi
          
          echo "branch_type=$BRANCH_TYPE" >> $GITHUB_OUTPUT
          echo "branch_version=$BRANCH_VERSION" >> $GITHUB_OUTPUT
          echo "Branch type: $BRANCH_TYPE, Branch version: $BRANCH_VERSION"
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            # For the dev branch
            type=raw,value=dev,enable=${{ github.ref == format('refs/heads/{0}', 'dev') }}
            
            # For release branches
            type=raw,value=${{ steps.version_info.outputs.branch_version }},enable=${{ steps.version_info.outputs.branch_type == 'release' }}
            type=raw,value=release-${{ steps.version_info.outputs.branch_version }},enable=${{ steps.version_info.outputs.branch_type == 'release' }}
            
            # For hotfix branches
            type=raw,value=${{ steps.version_info.outputs.branch_version }},enable=${{ steps.version_info.outputs.branch_type == 'hotfix' }}
            type=raw,value=hotfix-${{ steps.version_info.outputs.branch_version }},enable=${{ steps.version_info.outputs.branch_type == 'hotfix' }}
            
            # For version tags
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            
            # Use package.json version for dev branch
            type=raw,value=${{ steps.version_info.outputs.version }},enable=${{ github.ref == format('refs/heads/{0}', 'dev') }}
            
            # Add latest tag for dev branch
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'dev') }}
          labels: |
            org.opencontainers.image.title=NCRelay
            org.opencontainers.image.description=Securely relay notifications to your favorite platforms
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.version_info.outputs.version }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}
