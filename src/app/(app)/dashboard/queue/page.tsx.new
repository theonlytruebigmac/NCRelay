"use client";

import { useState, useEffect } from "react";
import { useToast } from "@/hooks/use-toast";
import { PageShell } from "@/components/layout/PageShell";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { Loader2, RefreshCw, Clock, CheckCircle, XCircle, AlertCircle, Pause, Play } from "lucide-react";
import type { QueuedNotification } from "@/lib/types";

export default function NotificationQueuePage() {
  const [activeTab, setActiveTab] = useState<string>("pending");
  const [loading, setLoading] = useState<boolean>(true);
  const [processing, setProcessing] = useState<boolean>(false);
  const [queueEnabled, setQueueEnabled] = useState<boolean>(true);
  const [toggleLoading, setToggleLoading] = useState<boolean>(false);
  const [stats, setStats] = useState<{
    pending: number;
    processing: number;
    completed: number;
    failed: number;
    total: number;
  }>({
    pending: 0,
    processing: 0,
    completed: 0,
    failed: 0,
    total: 0
  });
  const [notifications, setNotifications] = useState<QueuedNotification[]>([]);
  const { toast } = useToast();

  const fetchStats = async () => {
    try {
      const res = await fetch('/api/management/queue');
      if (!res.ok) throw new Error('Failed to fetch queue stats');
      const data = await res.json();
      setStats(data);
    } catch (error) {
      console.error('Error fetching queue stats:', error);
      toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to fetch queue statistics."
      });
    }
  };

  const fetchNotifications = async (status: string) => {
    setLoading(true);
    try {
      const res = await fetch(`/api/management/queue?status=${status}`);
      if (!res.ok) throw new Error(`Failed to fetch ${status} notifications`);
      const data = await res.json();
      setNotifications(data);
    } catch (error) {
      console.error(`Error fetching ${status} notifications:`, error);
      toast({
        variant: "destructive",
        title: "Error",
        description: `Failed to fetch ${status} notifications.`
      });
      setNotifications([]);
    } finally {
      setLoading(false);
    }
  };

  const handleProcessQueue = async () => {
    setProcessing(true);
    try {
      const res = await fetch('/api/management/queue', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ action: 'process' })
      });
      
      if (!res.ok) throw new Error('Failed to process queue');
      
      const data = await res.json();
      toast({
        title: "Queue Processing",
        description: `Processed ${data.processed} notifications: ${data.succeeded} succeeded, ${data.failed} failed.`
      });
      
      // Refresh data
      fetchStats();
      fetchNotifications(activeTab);
    } catch (error) {
      console.error('Error processing queue:', error);
      toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to process notification queue."
      });
    } finally {
      setProcessing(false);
    }
  };

  const handleRetry = async (id: string) => {
    try {
      const res = await fetch('/api/management/queue', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ action: 'retry', id })
      });
      
      if (!res.ok) throw new Error('Failed to retry notification');
      
      toast({
        title: "Notification Queued",
        description: "The notification has been queued for retry."
      });
      
      // Refresh data
      fetchStats();
      fetchNotifications(activeTab);
    } catch (error) {
      console.error('Error retrying notification:', error);
      toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to retry notification."
      });
    }
  };

  const handleTabChange = (value: string) => {
    setActiveTab(value);
    fetchNotifications(value);
  };

  const fetchQueueStatus = async () => {
    try {
      const res = await fetch('/api/management/queue/status');
      if (!res.ok) throw new Error('Failed to fetch queue status');
      const data = await res.json();
      setQueueEnabled(data.enabled);
    } catch (error) {
      console.error('Error fetching queue status:', error);
      toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to fetch queue processing status."
      });
    }
  };

  const toggleQueueProcessing = async () => {
    setToggleLoading(true);
    try {
      const res = await fetch('/api/management/queue/status', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ enabled: !queueEnabled })
      });
      
      if (!res.ok) throw new Error('Failed to update queue status');
      
      const data = await res.json();
      setQueueEnabled(data.enabled);
      
      toast({
        title: data.enabled ? "Queue Processing Enabled" : "Queue Processing Paused",
        description: data.message
      });
    } catch (error) {
      console.error('Error toggling queue status:', error);
      toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to update queue processing status."
      });
    } finally {
      setToggleLoading(false);
    }
  };

  // Initial data fetch
  useEffect(() => {
    fetchStats();
    fetchNotifications(activeTab);
    fetchQueueStatus();
    
    // Set up polling for stats
    const interval = setInterval(() => {
      fetchStats();
      if (!loading) fetchNotifications(activeTab);
    }, 30000); // Every 30 seconds
    
    return () => clearInterval(interval);
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'pending':
        return <Badge variant="outline" className="bg-yellow-50 text-yellow-700">Pending</Badge>;
      case 'processing':
        return <Badge variant="outline" className="bg-blue-50 text-blue-700">Processing</Badge>;
      case 'completed':
        return <Badge variant="outline" className="bg-green-50 text-green-700">Completed</Badge>;
      case 'failed':
        return <Badge variant="outline" className="bg-red-50 text-red-700">Failed</Badge>;
      default:
        return <Badge variant="outline">Unknown</Badge>;
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'pending':
        return <Clock className="h-5 w-5 text-yellow-500" />;
      case 'processing':
        return <Loader2 className="h-5 w-5 text-blue-500 animate-spin" />;
      case 'completed':
        return <CheckCircle className="h-5 w-5 text-green-500" />;
      case 'failed':
        return <XCircle className="h-5 w-5 text-red-500" />;
      default:
        return <AlertCircle className="h-5 w-5" />;
    }
  };

  const formatDate = (dateString: string | null) => {
    if (!dateString) return 'N/A';
    return new Date(dateString).toLocaleString();
  };

  return (
    <PageShell 
      title="Notification Queue" 
      description="Manage outgoing notification delivery queue"
    >
      <div className="space-y-6">
        {/* Stats Cards */}
        <div className="grid gap-4 md:grid-cols-4">
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Pending</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{stats.pending}</div>
              <p className="text-xs text-muted-foreground">Waiting to be processed</p>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Processing</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{stats.processing}</div>
              <p className="text-xs text-muted-foreground">Currently being sent</p>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Completed</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{stats.completed}</div>
              <p className="text-xs text-muted-foreground">Successfully delivered</p>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Failed</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{stats.failed}</div>
              <p className="text-xs text-muted-foreground">Failed to deliver</p>
            </CardContent>
          </Card>
        </div>
        
        {/* Action Buttons */}
        <div className="flex justify-between">
          <Button onClick={() => { fetchStats(); fetchNotifications(activeTab); }}>
            <RefreshCw className="mr-2 h-4 w-4" />
            Refresh
          </Button>
          
          <div className="space-x-2">
            <Button 
              variant={queueEnabled ? "outline" : "default"} 
              onClick={toggleQueueProcessing} 
              disabled={toggleLoading}
              className={queueEnabled ? "bg-yellow-50 text-yellow-700 hover:bg-yellow-100 border-yellow-200" : "bg-green-50 text-green-700 hover:bg-green-100 border-green-200"}
            >
              {toggleLoading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  {queueEnabled ? "Pausing..." : "Enabling..."}
                </>
              ) : (
                <>
                  {queueEnabled ? (
                    <>
                      <Pause className="mr-2 h-4 w-4" />
                      Pause Processing
                    </>
                  ) : (
                    <>
                      <Play className="mr-2 h-4 w-4" />
                      Resume Processing
                    </>
                  )}
                </>
              )}
            </Button>
            
            <Button onClick={handleProcessQueue} disabled={processing}>
              {processing ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Processing...
                </>
              ) : (
                <>
                  <RefreshCw className="mr-2 h-4 w-4" />
                  Process Queue
                </>
              )}
            </Button>
          </div>
        </div>
        
        {/* Notifications Table */}
        <Card>
          <CardHeader>
            <CardTitle>Notification Queue</CardTitle>
            <CardDescription>
              View and manage notifications in the queue
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Tabs defaultValue="pending" onValueChange={handleTabChange}>
              <TabsList className="mb-4">
                <TabsTrigger value="pending">Pending ({stats.pending})</TabsTrigger>
                <TabsTrigger value="processing">Processing ({stats.processing})</TabsTrigger>
                <TabsTrigger value="completed">Completed ({stats.completed})</TabsTrigger>
                <TabsTrigger value="failed">Failed ({stats.failed})</TabsTrigger>
              </TabsList>
              
              <TabsContent value={activeTab}>
                {loading ? (
                  <div className="flex justify-center items-center p-8">
                    <Loader2 className="h-8 w-8 animate-spin text-muted-foreground" />
                  </div>
                ) : notifications.length === 0 ? (
                  <div className="text-center p-8 text-muted-foreground">
                    No {activeTab} notifications found
                  </div>
                ) : (
                  <div className="rounded-md border">
                    <div className="overflow-x-auto">
                      <table className="w-full text-sm">
                        <thead>
                          <tr className="border-b bg-muted/50">
                            <th className="py-3 px-4 text-left font-medium">Status</th>
                            <th className="py-3 px-4 text-left font-medium">Integration</th>
                            <th className="py-3 px-4 text-left font-medium">API Endpoint</th>
                            <th className="py-3 px-4 text-left font-medium">Created</th>
                            <th className="py-3 px-4 text-left font-medium">Last Attempt</th>
                            <th className="py-3 px-4 text-left font-medium">Next Retry</th>
                            <th className="py-3 px-4 text-left font-medium">Actions</th>
                          </tr>
                        </thead>
                        <tbody>
                          {notifications.map((notification) => (
                            <tr key={notification.id} className="border-b">
                              <td className="py-3 px-4 align-middle">
                                <div className="flex items-center">
                                  {getStatusIcon(notification.status)}
                                  <span className="ml-2">{getStatusBadge(notification.status)}</span>
                                </div>
                              </td>
                              <td className="py-3 px-4 align-middle">
                                {notification.integrationName}
                                <div className="text-xs text-muted-foreground">{notification.platform}</div>
                              </td>
                              <td className="py-3 px-4 align-middle">
                                {notification.apiEndpointName}
                                <div className="text-xs text-muted-foreground truncate max-w-[200px]">{notification.apiEndpointPath}</div>
                              </td>
                              <td className="py-3 px-4 align-middle">
                                {formatDate(notification.createdAt)}
                              </td>
                              <td className="py-3 px-4 align-middle">
                                {formatDate(notification.lastAttemptAt)}
                                {notification.responseStatus && (
                                  <div className="text-xs text-muted-foreground">
                                    Status: {notification.responseStatus}
                                  </div>
                                )}
                              </td>
                              <td className="py-3 px-4 align-middle">
                                {formatDate(notification.nextRetryAt)}
                                {notification.status === 'failed' && (
                                  <div className="text-xs text-muted-foreground">
                                    Retries: {notification.retryCount}/{notification.maxRetries}
                                  </div>
                                )}
                              </td>
                              <td className="py-3 px-4 align-middle">
                                {notification.status === 'failed' && notification.retryCount < notification.maxRetries && (
                                  <Button 
                                    variant="outline" 
                                    size="sm"
                                    onClick={() => handleRetry(notification.id)}
                                  >
                                    Retry
                                  </Button>
                                )}
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  </div>
                )}
              </TabsContent>
            </Tabs>
          </CardContent>
        </Card>
      </div>
    </PageShell>
  );
}
